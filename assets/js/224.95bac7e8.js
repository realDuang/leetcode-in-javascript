(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{542:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前缀和算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前缀和算法"}},[t._v("#")]),t._v(" 前缀和算法")]),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("前缀和，顾名思义，就是对一个数组的前一部分进行求和。最终会得到一个长度为 "),s("strong",[t._v("n+1")]),t._v(" 的数组，其中第 i 个元素表示原数组前 i 个元素的和。那么它有什么用呢？")]),t._v(" "),s("p",[t._v("前缀和算法可以用来快速计算一个区间的和。通过前缀和，我们可以"),s("strong",[t._v("把连续子数组的元素和转换成两个前缀和的差")]),t._v("。")]),t._v(" "),s("p",[t._v("假设我们有一个数组 nums，前缀和数组为 preSum，那么 preSum[i] 表示 nums[0] 到 nums[i-1] 的和。我们可以通过 "),s("code",[t._v("preSum[end+1] - preSum[start]")]),t._v(" 来计算 nums[start] 到 nums[end] 的和。")]),t._v(" "),s("p",[t._v("例如在"),s("code",[t._v("[303] 区域和检索 - 数组不可变")]),t._v(" 中，我们可以使用前缀和来快速计算任意区间的和。我们只需要在初始化时计算出前缀和数组，然后在查询时通过前缀和数组来计算区间和，时间复杂度为 O(1)。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumArray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设 preSum 为前缀和")]),t._v("\n  preSum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求前缀和")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询区间和")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sumRange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"适用情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用情况"}},[t._v("#")]),t._v(" 适用情况")]),t._v(" "),s("p",[t._v("前缀和算法一般常用与解决滑动窗口问题解决不了的数组区间题型。")]),t._v(" "),s("p",[t._v("例如在"),s("code",[t._v("[560] 和为 K 的子数组")]),t._v("中，我们可以使用前缀和来计算任意区间的和。我们可以用一个哈希表来存储前缀和的出现次数，然后遍历数组，计算当前前缀和与目标值的差值，如果差值在哈希表中存在，就说明找到了一个符合条件的子数组。")]),t._v(" "),s("p",[t._v("但这个问题却不能用滑动窗口的思路来解决。因为该题中数组允许出现负数，此时滑动窗口在收缩或扩展时，无法保证结果是单调的。例如收缩左侧窗口，其窗口中的和不一定会减小，如果去除的是负数结果会增大。")]),t._v(" "),s("p",[t._v("此时我们就更推荐用前缀和来解决这个问题。通过任意两前缀和的差值来计算区间和。")]),t._v(" "),s("p",[t._v("还有涉及到效率问题的一些情况。例如需要多次查询区间和。滑动窗口的时间复杂度是 O(n)，而前缀和的时间复杂度是 O(1)。如果我们需要多次查询区间和，那么前缀和会更高效。")]),t._v(" "),s("h2",{attrs:{id:"扩展题型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展题型"}},[t._v("#")]),t._v(" 扩展题型")]),t._v(" "),s("p",[t._v("如果是要求二维数组的前缀和呢？例如在"),s("code",[t._v("[304] 二维区域和检索 - 矩形区域")]),t._v("中，我们可以使用一个二维数组来存储前缀和。对于二维数组的前缀和，我们可以用 "),s("code",[t._v("preSum[r][c]")]),t._v(" 表示从 (0, 0) 到 (r, c) 的矩形区域的和。我们可以通过 "),s("code",[t._v("preSum[r2][c2] - preSum[r1-1][c2] - preSum[r2][c1-1] + preSum[r1-1][c1-1]")]),t._v(" 来计算任意矩形区域的和。")]),t._v(" "),s("h2",{attrs:{id:"题型参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题型参考"}},[t._v("#")]),t._v(" 题型参考")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("[303] 区域和检索 - 数组不可变")])]),t._v(" "),s("li",[s("code",[t._v("[304] 二维区域和检索 - 矩形区域")])]),t._v(" "),s("li",[s("code",[t._v("[307] 区域和检索 - 数组可修改")])]),t._v(" "),s("li",[s("code",[t._v("[560] 和为 K 的子数组")])]),t._v(" "),s("li",[s("code",[t._v("[238] 除自身以外数组的乘积")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);